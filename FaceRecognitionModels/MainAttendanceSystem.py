''' This is the main() method for face recognition
    Author: Sangmork park, Virginia Military Institute
    Version: Mar. 2024
    Source file: students_data.json, EncodeFile.p (generated by EncodeGenerator.py)
    Database file: students.db (generated by SetupStudentsDB.py)
'''

import pickle
import cv2
import os
import numpy as np
import face_recognition
import cvzone
import sqlite3
from datetime import datetime

''' read database with student's id number and returns the data on a dictionary data format '''
def getStudentInfo(sid):
    connector = sqlite3.connect('students.db')
    cursor = connector.cursor()
    # cursor.execute("SELECT name From Students WHERE id = '{}'".format(sid))
    cursor.execute("SELECT * From Students WHERE id = '{}'".format(sid))
    for row in cursor:
        studentInfo = {"id":row[0], "name": row[1], "major": row[2], "starting_year": row[3],
                       "total_attendance": row[4], "standing": row[5], "year": row[6], "last_attendance": row[7]}

    # print(cursor.fetchone())
    connector.close()
    return studentInfo

''' update "total_attendance" and the time of "last_attendance" '''
# def updateAttendance(number, sid):
def updateAttendance(sid):
    connector = sqlite3.connect('students.db')
    cursor = connector.cursor()
    cursor.execute("SELECT total_attendance FROM Students WHERE id = '{}'".format(sid))
    number = cursor.fetchone()[0]
    dateTime = datetime.now().strftime("%m/%d/%Y %H:%M:%S")
    # print("number: ", number)

    cursor.execute("UPDATE Students SET total_attendance = {} WHERE id = '{}'".format(number+1, sid))
    cursor.execute("UPDATE Students SET last_attendance = '{}' WHERE id = '{}'".format(dateTime, sid))
    cursor.execute("COMMIT")

    updatedNumber = cursor.execute("SELECT total_attendance FROM Students WHERE id = '{}'".format(sid))
    # print("before: ", number)
    # print("after: ", cursor.fetchall()[0])
    # print(dateTime)

    connector.close()
    return updatedNumber

def webCamMain():
    cap = cv2.VideoCapture(0)
    cap.set(3, 640)
    cap.set(4, 480)

    ''' importing mode images into modeImgList'''
    imgBackground = cv2.imread('Resources/background.png')
    modeFolderPath = 'Resources/Modes'
    modeImgFileList = os.listdir(modeFolderPath)
    modeImgList = []
    for fileName in modeImgFileList:
        modeImgList.append(cv2.imread(os.path.join(modeFolderPath, fileName)));
    # print(len(modeImgList))

    ''' Load the encode file (generated by EncodeGenerator.py) '''
    print("Loading Encode File.")
    file = open("EncodeFile.p", "rb")
    encodeListWithKnownIDs = pickle.load(file)
    file.close()
    encodeListKnown, studentIDs = encodeListWithKnownIDs
    # print(studentIDs)
    print("Encode File Loaded.")

    ''' modeType: 0-Active, 1-Detected, 2-Marked, 3-Already Marked '''
    modeType = 0
    ''' download times: will download only once when the first detection was made '''
    frameCounter = 0;
    studentId = -1

    while True:
        success, img = cap.read()
        imgSmall = cv2.resize(img, (0, 0), None, 0.25, 0.25)
        imgSmall = cv2.cvtColor(imgSmall, cv2.COLOR_BGR2RGB)

        ''' Find a face and extract the face image section  '''
        faceInCurrFrame = face_recognition.face_locations(imgSmall)
        ''' Encode the extracted face image '''
        encodeCurrFrame = face_recognition.face_encodings(imgSmall, faceInCurrFrame)

        imgBackground[160:160+480, 50:50+640] = img;
        imgBackground[40:40+640, 800:800+420] = modeImgList[modeType];
        if modeType == 3:
            ''' name display on center '''
            (wt, ht), _ = cv2.getTextSize(str(studentInfo['name']), cv2.FONT_HERSHEY_SIMPLEX, 1, 1)
            offset = (420 - wt) // 2  # integer division
            # print(offset)
            cv2.putText(imgBackground, str(studentInfo['name']), (800 + offset, 160), cv2.FONT_HERSHEY_SIMPLEX, 1,
                        (255, 0, 255), 2)
        # cv2.imshow("WebCam", img)

        for encodeFace, faceLoc in zip(encodeCurrFrame, faceInCurrFrame):
            ''' only matching id is true, else false '''
            matches = face_recognition.compare_faces(encodeListKnown, encodeFace)
            ''' distance: each id's similarity value '''
            faceDist = face_recognition.face_distance(encodeListKnown, encodeFace)
            # print("matches:", matches)
            # print("faceDist:", faceDist)

            matchIndex = np.argmin(faceDist)
            # print(matchIndex)
            if matches[matchIndex]:
                print("Known Face Detected")
                # print(studentIDs[matchIndex])
                y1, x2, y2, x1 = faceLoc
                y1, x2, y2, x1 = y1 * 4, x2 * 4, y2 * 4, x1 * 4
                bbox = 50 + x1, 160 + y1, x2 - x1, y2 - y1
                imgBackground = cvzone.cornerRect(imgBackground, bbox, rt=0)

                ''' if matches, get the student's id '''
                studentId = studentIDs[matchIndex]
                # print(getStudentInfo(studentId)[0])
                # print(getStudentInfo(studentId))

                if frameCounter == 0:
                    frameCounter = 1
                    modeType = 1

        if (frameCounter != 0):
            if frameCounter == 1:
                studentInfo = getStudentInfo(studentId)
                # print(studentInfo)
                ''' update attendance '''
                # print(studentInfo["last_attendance"])
                dateTimeObject = datetime.strptime(studentInfo["last_attendance"], "%m/%d/%Y %H:%M:%S")
                # print(dateTimeObject)
                secondsElapsed = (datetime.now() - dateTimeObject).total_seconds()
                # print(secondsElapsed)

                if secondsElapsed > 30:
                    # print(secondsElapsed)
                    updateAttendance(studentId)
                else:
                    modeType = 3
                    frameCounter = 0
                    imgBackground[40:40 + 640, 800:800 + 420] = modeImgList[modeType];
                    ''' name display on center '''
                    (wt, ht), _ = cv2.getTextSize(str(studentInfo['name']), cv2.FONT_HERSHEY_SIMPLEX, 1, 1)
                    offset = (420 - wt) // 2  # integer division
                    # print(offset)
                    cv2.putText(imgBackground, str(studentInfo['name']), (800 + offset, 160), cv2.FONT_HERSHEY_SIMPLEX,1, (255, 0, 255), 2)

                studentInfo = getStudentInfo(studentId)

            if modeType == 1:

                if 10 < frameCounter < 20:
                    modeType = 2
                    # pass

                imgBackground[40:40 + 640, 800:800 + 420] = modeImgList[modeType];

                if frameCounter <= 10:

                    cv2.putText(imgBackground, str(studentInfo['total_attendance']), (845, 120), cv2.FONT_HERSHEY_SIMPLEX,
                                0.8, (255, 255, 255), 2)
                    cv2.putText(imgBackground, str(studentInfo['id']), (1000, 500), cv2.FONT_HERSHEY_SIMPLEX,
                                0.5, (255, 255, 255), 2)
                    cv2.putText(imgBackground, str(studentInfo['standing']), (900, 610), cv2.FONT_HERSHEY_SIMPLEX,
                                0.7, (50, 150, 50), 2)
                    cv2.putText(imgBackground, str(studentInfo['year']), (1020, 610), cv2.FONT_HERSHEY_SIMPLEX,
                                0.7, (50, 150, 50), 2)
                    cv2.putText(imgBackground, str(studentInfo['starting_year']), (1120, 610), cv2.FONT_HERSHEY_SIMPLEX,
                                0.7, (50, 150, 50), 2)

                    ''' name display on center '''
                    (wt, ht), _ = cv2.getTextSize(str(studentInfo['name']), cv2.FONT_HERSHEY_SIMPLEX, 0.6, 1)
                    offset = (420 - wt) // 2  # integer division
                    # print(offset)
                    cv2.putText(imgBackground, str(studentInfo['name']), (820 + offset, 440), cv2.FONT_HERSHEY_SIMPLEX,0.6, (255, 255, 255), 2)
                    cv2.putText(imgBackground, str(studentInfo['major']), (800 + offset, 560), cv2.FONT_HERSHEY_SIMPLEX,
                                0.6, (255, 255, 255), 2)
                    # cv2.putText(imgBackground, str(studentInfo['name']), (870, 440), cv2.FONT_HERSHEY_COMPLEX,0.8, (100, 100, 100), 1)

                    ''' get the image from image storage and display student image '''
                    studentImgFile = 'Images/' + studentId + ".png"
                    studentImg = cv2.imread(studentImgFile)
                    imgBackground[165:165+220, 900:900+220] = studentImg

            frameCounter += 1

            if frameCounter > 20:
                frameCounter = 0
                modeType = 0
                studentInfo = []
                # studentImg = []
                imgBackground[40:40 + 640, 800:800 + 420] = modeImgList[modeType]

        cv2.imshow("Face Attendance", imgBackground)

        ''' cv2.waitKey(1) : number must be greater than '0'
            waitkey() allows users to display a window in mil-seconds, or until any key is pressed '''
        if(cv2.waitKey(1) == ord('q')):
            break

if __name__ == '__main__':
    webCamMain()